Paytm Status:

setup ngrok

postman 
 - init did not work = signature failure
 - fetch payment methods worked

native-api-set
 - init worked
 - process did not work
   error:
   "Payment failed due to a technical error. Please try after some time."

1) user will have a call back URL pointing to merchant server,
   which will be used to ensure that server got acknowledged the
   transaction or it has to acknowledge the trasaction using
   status APIs. [ubu]

01. Store context of multiple agents in context [ For now do for one ]

MID can be shared, but not MID-KEY



require('../../../cmd/settings')

node pkg/infra/paytm/driver.js

let data =
{
    JournalID     : '072015'
  , NetPrice      : 1.00
  , User          :
  {
      ID          : 'User1'
    , Email       : '123@gmail.com'
    , Name        : 'User-1'
    , MobileNo    : '+910987654321'
    , Address     : { PostalCode : 123456 }
  }
}

let pay = new PayTM()
//pay.CreateToken(data)

data =
{
    JournalID     : '60fe6ffbfc97c213300e3850'
  , Amount        : 1.00
  , ChannelRefID  : '20210726111212800110168291702867345'
}

// pay.Refund(data)
// pay.RefundStatus(data)
pay.PaymentStatus(data)






Todo:
Monitoring field to check agent/admin is in work/currently engaged
Fix Dates in Journal List/View
Consier Store as entity and create seperate token for it
In Page & Limit - Page > 0
user $inc to modify product count
https://docs.mongodb.com/manual/tutorial/optimize-query-performance-with-indexes-and-projections/#limit-the-number-of-query-results-to-reduce-network-demand


Completed
01 journal read											          21_08_13    21_08_23
02 journal	list	agetn/store/user            21_08_23    21_08_23
06 store   list limit                         reimplement
04 product list limit
26 add UserMode(Customer,Agent,Seller,Admin) User record, limit one mode with one mob_no [dup]
34 check if one of the socket id is not present at the time of emission, how system crashes
16 socket limit connections
37    - lock cart checkout once the payment initated - Add Journal ID to the cart & remove it only after payment success 
      - limit number of checkouts in given span of time [This will be a good algorithm ]


---

.skip(skip).limit(nPerPage).toArray()

dbset.Limit

"mongodb": "^3.6.3"

npm notice
npm notice New minor version of npm available! 7.6.3 -> 7.21.0
npm notice Changelog: https://github.com/npm/cli/releases/tag/v7.21.0
npm notice Run npm install -g npm@7.21.0 to update!
npm notice


Page/Limit



our view and display

current progress

alpha expectations

------------------------------------------------------------------

Add processing time to journal, enable delay between otp resends.
Add varient, 

- pull frame for input validation [not important]

Needed:

optional, requied, float, integer, 
string, mode in, objectID (custom validator),
duplication check, email, token, array,
maxstrlen, nested objs, boolean

------------------------------------------------------------------

required|
email|
maxLength:50|
integer
string
array



    plan: [ { price: '25', title: 'OK' } ]

    'plan'		: 'required|array',
    	'plan.*.price'	: 'required|integer',
    	'plan.*.title'	: 'required'

// 

const niv = require('node-input-validator')
niv.extend('sumOfFields', ({ value, args }, validator) => 
{
  if (args.length !== 2) throw new Error('Invalid seed for rule sumOfFields')
  const anotherValue = Number(validator.inputs[args[0]])
  const eq = Number(args[1])
  if ((Number(value) + anotherValue) !== eq)
  return false
  return true
})
let v = new niv.Validator({ num1: '50', num2: '50' },{ num1: 'sumOfFields:num2,100|required' })
let matched = await v.check()
assert.equal(matched, true)

new Validator(
  { email: '', age: '16' },
  { email: 'requiredIf:age,16' },
)

requiredNotIf:age

requiredWith:age

requiredWithout:phone,pan
requiredWithout:email

new Validator(
  { joining: '' },
  { joining: 'required|after:2018-02-10' },
);


hash:algo - The field under validation must be a valid hash as per provided seed.
new Validator( { id: 'fd1baf48377a9f644f9af89abbee29f6' }, { id: 'required|hash:md5' })

new Validator(
  { status: '' },
  { status: 'required|in:active,inactive,blocked' },
);


age:'required|between:17,30'


'required|max:35'

password: 'required|same:confirm_password'

niv.extend('even', ({ value }) => {
  if ((parseInt(value) % 2) == 0) {
    return true;
  }
  return false;
});



niv.extend('unique', async ({ value, args }) =>
{
  const field 		= args[1] || 'email'
  let condition 	= {}
  condition[field] 	= value
  if (args[2]) condition['_id'] = { $ne: mongoose.Types.ObjectId(args[2]) }
  let emailExist = await mongoose.model(args[0]).findOne(condition).select(field)
  if (emailExist) return false
  return true
})

